// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": node Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// CreateNodePayload is the node create action payload.
type CreateNodePayload struct {
	// The API URL for the node, possibly relative to the pinbase (i.e. localhost)
	APIURL string `form:"api-url" json:"api-url" xml:"api-url"`
	// A helpful description of the node
	Description string `form:"description" json:"description" xml:"description"`
}

// CreateNodePath computes a request path to the create action of node.
func CreateNodePath() string {

	return fmt.Sprintf("/nodes")
}

// Connect to a node
func (c *Client) CreateNode(ctx context.Context, path string, payload *CreateNodePayload) (*http.Response, error) {
	req, err := c.NewCreateNodeRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateNodeRequest create the request corresponding to the create action endpoint of the node resource.
func (c *Client) NewCreateNodeRequest(ctx context.Context, path string, payload *CreateNodePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteNodePath computes a request path to the delete action of node.
func DeleteNodePath(nodeHash string) string {
	param0 := nodeHash

	return fmt.Sprintf("/nodes/%s", param0)
}

// Delete a node
func (c *Client) DeleteNode(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteNodeRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteNodeRequest create the request corresponding to the delete action endpoint of the node resource.
func (c *Client) NewDeleteNodeRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListNodePath computes a request path to the list action of node.
func ListNodePath() string {

	return fmt.Sprintf("/nodes")
}

// List the nodes available to this pinbase
func (c *Client) ListNode(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListNodeRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListNodeRequest create the request corresponding to the list action endpoint of the node resource.
func (c *Client) NewListNodeRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowNodePath computes a request path to the show action of node.
func ShowNodePath(nodeHash string) string {
	param0 := nodeHash

	return fmt.Sprintf("/nodes/%s", param0)
}

// Get node by hash
func (c *Client) ShowNode(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowNodeRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowNodeRequest create the request corresponding to the show action endpoint of the node resource.
func (c *Client) NewShowNodeRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateNodePath computes a request path to the update action of node.
func UpdateNodePath(nodeHash string) string {
	param0 := nodeHash

	return fmt.Sprintf("/nodes/%s", param0)
}

// Change a node's address (must be the same node-id) or description
func (c *Client) UpdateNode(ctx context.Context, path string, payload *NodePayload) (*http.Response, error) {
	req, err := c.NewUpdateNodeRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateNodeRequest create the request corresponding to the update action endpoint of the node resource.
func (c *Client) NewUpdateNodeRequest(ctx context.Context, path string, payload *NodePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
