// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import "github.com/goadesign/goa"

// A Pinbase Party (default view)
//
// Identifier: application/vnd.pinbase.party+json; view=default
type PinbaseParty struct {
	// A helpful description of the party
	Description string `form:"description" json:"description" xml:"description"`
	// The hash of the object describing the party
	Hash string `form:"hash" json:"hash" xml:"hash"`
}

// Validate validates the PinbaseParty media type instance.
func (mt *PinbaseParty) Validate() (err error) {
	if mt.Hash == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "hash"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	return
}

// PinbasePartyCollection is the media type for an array of PinbaseParty (default view)
//
// Identifier: application/vnd.pinbase.party+json; type=collection; view=default
type PinbasePartyCollection []*PinbaseParty

// Validate validates the PinbasePartyCollection media type instance.
func (mt PinbasePartyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// A Pin for a Party (default view)
//
// Identifier: application/vnd.pinbase.pin+json; view=default
type PinbasePin struct {
	// Aliases for the pinned object
	Aliases []string `form:"aliases" json:"aliases" xml:"aliases"`
	// The hash of the object to be pinned
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// Last pin error message
	LastError string `form:"last-error" json:"last-error" xml:"last-error"`
	// The status of the pin
	Status string `form:"status" json:"status" xml:"status"`
	// Indicates that the party wants to actually pin the object
	WantPinned bool `form:"want-pinned" json:"want-pinned" xml:"want-pinned"`
}

// Validate validates the PinbasePin media type instance.
func (mt *PinbasePin) Validate() (err error) {
	if mt.Hash == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "hash"))
	}
	if mt.Aliases == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "aliases"))
	}

	if mt.Status == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "status"))
	}
	if mt.LastError == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "last-error"))
	}
	return
}

// PinbasePinCollection is the media type for an array of PinbasePin (default view)
//
// Identifier: application/vnd.pinbase.pin+json; type=collection; view=default
type PinbasePinCollection []*PinbasePin

// Validate validates the PinbasePinCollection media type instance.
func (mt PinbasePinCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
