// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"net/http"

	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"golang.org/x/net/context"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// PartyController is the controller interface for the Party actions.
type PartyController interface {
	goa.Muxer
	Create(*CreatePartyContext) error
	Delete(*DeletePartyContext) error
	List(*ListPartyContext) error
	Show(*ShowPartyContext) error
	Update(*UpdatePartyContext) error
}

// MountPartyController "mounts" a Party resource controller on the given service.
func MountPartyController(service *goa.Service, ctrl PartyController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/parties", ctrl.MuxHandler("preflight", handlePartyOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/parties/:partyHash", ctrl.MuxHandler("preflight", handlePartyOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePartyContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreatePartyPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handlePartyOrigin(h)
	service.Mux.Handle("POST", "/api/parties", ctrl.MuxHandler("Create", h, unmarshalCreatePartyPayload))
	service.LogInfo("mount", "ctrl", "Party", "action", "Create", "route", "POST /api/parties")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeletePartyContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handlePartyOrigin(h)
	service.Mux.Handle("DELETE", "/api/parties/:partyHash", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Party", "action", "Delete", "route", "DELETE /api/parties/:partyHash")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPartyContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handlePartyOrigin(h)
	service.Mux.Handle("GET", "/api/parties", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Party", "action", "List", "route", "GET /api/parties")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPartyContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handlePartyOrigin(h)
	service.Mux.Handle("GET", "/api/parties/:partyHash", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Party", "action", "Show", "route", "GET /api/parties/:partyHash")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdatePartyContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*PartyUpdatePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handlePartyOrigin(h)
	service.Mux.Handle("PATCH", "/api/parties/:partyHash", ctrl.MuxHandler("Update", h, unmarshalUpdatePartyPayload))
	service.LogInfo("mount", "ctrl", "Party", "action", "Update", "route", "PATCH /api/parties/:partyHash")
}

// handlePartyOrigin applies the CORS response headers corresponding to the origin.
func handlePartyOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreatePartyPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePartyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createPartyPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdatePartyPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdatePartyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &partyUpdatePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PinController is the controller interface for the Pin actions.
type PinController interface {
	goa.Muxer
	Create(*CreatePinContext) error
	Delete(*DeletePinContext) error
	List(*ListPinContext) error
	Show(*ShowPinContext) error
	Update(*UpdatePinContext) error
}

// MountPinController "mounts" a Pin resource controller on the given service.
func MountPinController(service *goa.Service, ctrl PinController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/parties/:partyHash/pins", ctrl.MuxHandler("preflight", handlePinOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/parties/:partyHash/pins/:pinHash", ctrl.MuxHandler("preflight", handlePinOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePinContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreatePinPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handlePinOrigin(h)
	service.Mux.Handle("POST", "/api/parties/:partyHash/pins", ctrl.MuxHandler("Create", h, unmarshalCreatePinPayload))
	service.LogInfo("mount", "ctrl", "Pin", "action", "Create", "route", "POST /api/parties/:partyHash/pins")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeletePinContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	h = handlePinOrigin(h)
	service.Mux.Handle("DELETE", "/api/parties/:partyHash/pins/:pinHash", ctrl.MuxHandler("Delete", h, nil))
	service.LogInfo("mount", "ctrl", "Pin", "action", "Delete", "route", "DELETE /api/parties/:partyHash/pins/:pinHash")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPinContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handlePinOrigin(h)
	service.Mux.Handle("GET", "/api/parties/:partyHash/pins", ctrl.MuxHandler("List", h, nil))
	service.LogInfo("mount", "ctrl", "Pin", "action", "List", "route", "GET /api/parties/:partyHash/pins")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowPinContext(ctx, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handlePinOrigin(h)
	service.Mux.Handle("GET", "/api/parties/:partyHash/pins/:pinHash", ctrl.MuxHandler("Show", h, nil))
	service.LogInfo("mount", "ctrl", "Pin", "action", "Show", "route", "GET /api/parties/:partyHash/pins/:pinHash")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdatePinContext(ctx, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*PinUpdatePayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handlePinOrigin(h)
	service.Mux.Handle("PATCH", "/api/parties/:partyHash/pins/:pinHash", ctrl.MuxHandler("Update", h, unmarshalUpdatePinPayload))
	service.LogInfo("mount", "ctrl", "Pin", "action", "Update", "route", "PATCH /api/parties/:partyHash/pins/:pinHash")
}

// handlePinOrigin applies the CORS response headers corresponding to the origin.
func handlePinOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE")
				rw.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreatePinPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePinPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createPinPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdatePinPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdatePinPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &pinUpdatePayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
