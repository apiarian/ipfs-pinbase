// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
)

// LoginLoginContext provides the login login action context.
type LoginLoginContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLoginLoginContext parses the incoming request URL and body, performs validations and creates the
// context used by the login controller login action.
func NewLoginLoginContext(ctx context.Context, service *goa.Service) (*LoginLoginContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := LoginLoginContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LoginLoginContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// CreateNodeContext provides the node create action context.
type CreateNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateNodePayload
}

// NewCreateNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller create action.
func NewCreateNodeContext(ctx context.Context, service *goa.Service) (*CreateNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreateNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createNodePayload is the node create action payload.
type createNodePayload struct {
	// The API URL for the node, possibly relative to the pinbase (i.e. localhost)
	APIURL *string `form:"api-url,omitempty" json:"api-url,omitempty" xml:"api-url,omitempty"`
	// A helpful description of the node
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createNodePayload) Validate() (err error) {
	if payload.APIURL == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "api-url"))
	}
	if payload.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}
	return
}

// Publicize creates CreateNodePayload from createNodePayload
func (payload *createNodePayload) Publicize() *CreateNodePayload {
	var pub CreateNodePayload
	if payload.APIURL != nil {
		pub.APIURL = *payload.APIURL
	}
	if payload.Description != nil {
		pub.Description = *payload.Description
	}
	return &pub
}

// CreateNodePayload is the node create action payload.
type CreateNodePayload struct {
	// The API URL for the node, possibly relative to the pinbase (i.e. localhost)
	APIURL string `form:"api-url" json:"api-url" xml:"api-url"`
	// A helpful description of the node
	Description string `form:"description" json:"description" xml:"description"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateNodePayload) Validate() (err error) {
	if payload.APIURL == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "api-url"))
	}
	if payload.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateNodeContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateNodeContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteNodeContext provides the node delete action context.
type DeleteNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NodeHash string
}

// NewDeleteNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller delete action.
func NewDeleteNodeContext(ctx context.Context, service *goa.Service) (*DeleteNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeleteNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNodeHash := req.Params["nodeHash"]
	if len(paramNodeHash) > 0 {
		rawNodeHash := paramNodeHash[0]
		rctx.NodeHash = rawNodeHash
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteNodeContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteNodeContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteNodeContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListNodeContext provides the node list action context.
type ListNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller list action.
func NewListNodeContext(ctx context.Context, service *goa.Service) (*ListNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListNodeContext) OK(r PinbaseNodeCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.node+json; type=collection")
	if r == nil {
		r = PinbaseNodeCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowNodeContext provides the node show action context.
type ShowNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NodeHash string
}

// NewShowNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller show action.
func NewShowNodeContext(ctx context.Context, service *goa.Service) (*ShowNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNodeHash := req.Params["nodeHash"]
	if len(paramNodeHash) > 0 {
		rawNodeHash := paramNodeHash[0]
		rctx.NodeHash = rawNodeHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowNodeContext) OK(r *PinbaseNode) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.node+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowNodeContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateNodeContext provides the node update action context.
type UpdateNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	NodeHash string
	Payload  *NodePayload
}

// NewUpdateNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller update action.
func NewUpdateNodeContext(ctx context.Context, service *goa.Service) (*UpdateNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdateNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNodeHash := req.Params["nodeHash"]
	if len(paramNodeHash) > 0 {
		rawNodeHash := paramNodeHash[0]
		rctx.NodeHash = rawNodeHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateNodeContext) OK(r *PinbaseNode) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.node+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateNodeContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateNodeContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
