// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": Application Contexts
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"golang.org/x/net/context"
)

// CreatePartyContext provides the party create action context.
type CreatePartyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreatePartyPayload
}

// NewCreatePartyContext parses the incoming request URL and body, performs validations and creates the
// context used by the party controller create action.
func NewCreatePartyContext(ctx context.Context, service *goa.Service) (*CreatePartyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreatePartyContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createPartyPayload is the party create action payload.
type createPartyPayload struct {
	// A helpful description of the party
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The hash of the object describing the party
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPartyPayload) Validate() (err error) {
	if payload.Hash == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "hash"))
	}
	if payload.Description == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}
	return
}

// Publicize creates CreatePartyPayload from createPartyPayload
func (payload *createPartyPayload) Publicize() *CreatePartyPayload {
	var pub CreatePartyPayload
	if payload.Description != nil {
		pub.Description = *payload.Description
	}
	if payload.Hash != nil {
		pub.Hash = *payload.Hash
	}
	return &pub
}

// CreatePartyPayload is the party create action payload.
type CreatePartyPayload struct {
	// A helpful description of the party
	Description string `form:"description" json:"description" xml:"description"`
	// The hash of the object describing the party
	Hash string `form:"hash" json:"hash" xml:"hash"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePartyPayload) Validate() (err error) {
	if payload.Hash == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "hash"))
	}
	if payload.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "description"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePartyContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePartyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeletePartyContext provides the party delete action context.
type DeletePartyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
}

// NewDeletePartyContext parses the incoming request URL and body, performs validations and creates the
// context used by the party controller delete action.
func NewDeletePartyContext(ctx context.Context, service *goa.Service) (*DeletePartyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeletePartyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeletePartyContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePartyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePartyContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListPartyContext provides the party list action context.
type ListPartyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListPartyContext parses the incoming request URL and body, performs validations and creates the
// context used by the party controller list action.
func NewListPartyContext(ctx context.Context, service *goa.Service) (*ListPartyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListPartyContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPartyContext) OK(r PinbasePartyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.party+json; type=collection")
	if r == nil {
		r = PinbasePartyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowPartyContext provides the party show action context.
type ShowPartyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
}

// NewShowPartyContext parses the incoming request URL and body, performs validations and creates the
// context used by the party controller show action.
func NewShowPartyContext(ctx context.Context, service *goa.Service) (*ShowPartyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowPartyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPartyContext) OK(r *PinbaseParty) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.party+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPartyContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdatePartyContext provides the party update action context.
type UpdatePartyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
	Payload   *PartyUpdatePayload
}

// NewUpdatePartyContext parses the incoming request URL and body, performs validations and creates the
// context used by the party controller update action.
func NewUpdatePartyContext(ctx context.Context, service *goa.Service) (*UpdatePartyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdatePartyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdatePartyContext) OK(r *PinbaseParty) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.party+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePartyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdatePartyContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreatePinContext provides the pin create action context.
type CreatePinContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
	Payload   *CreatePinPayload
}

// NewCreatePinContext parses the incoming request URL and body, performs validations and creates the
// context used by the pin controller create action.
func NewCreatePinContext(ctx context.Context, service *goa.Service) (*CreatePinContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := CreatePinContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	return &rctx, err
}

// createPinPayload is the pin create action payload.
type createPinPayload struct {
	// Aliases for the pinned object
	Aliases []string `form:"aliases,omitempty" json:"aliases,omitempty" xml:"aliases,omitempty"`
	// The hash of the object to be pinned
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
	// Indicates that the party wants to actually pin the object
	WantPinned *bool `form:"want-pinned,omitempty" json:"want-pinned,omitempty" xml:"want-pinned,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPinPayload) Validate() (err error) {
	if payload.Hash == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "hash"))
	}
	if payload.Aliases == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "aliases"))
	}
	if payload.WantPinned == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "want-pinned"))
	}
	return
}

// Publicize creates CreatePinPayload from createPinPayload
func (payload *createPinPayload) Publicize() *CreatePinPayload {
	var pub CreatePinPayload
	if payload.Aliases != nil {
		pub.Aliases = payload.Aliases
	}
	if payload.Hash != nil {
		pub.Hash = *payload.Hash
	}
	if payload.WantPinned != nil {
		pub.WantPinned = *payload.WantPinned
	}
	return &pub
}

// CreatePinPayload is the pin create action payload.
type CreatePinPayload struct {
	// Aliases for the pinned object
	Aliases []string `form:"aliases" json:"aliases" xml:"aliases"`
	// The hash of the object to be pinned
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// Indicates that the party wants to actually pin the object
	WantPinned bool `form:"want-pinned" json:"want-pinned" xml:"want-pinned"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePinPayload) Validate() (err error) {
	if payload.Hash == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "hash"))
	}
	if payload.Aliases == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "aliases"))
	}

	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePinContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreatePinContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeletePinContext provides the pin delete action context.
type DeletePinContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
	PinHash   string
}

// NewDeletePinContext parses the incoming request URL and body, performs validations and creates the
// context used by the pin controller delete action.
func NewDeletePinContext(ctx context.Context, service *goa.Service) (*DeletePinContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := DeletePinContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	paramPinHash := req.Params["pinHash"]
	if len(paramPinHash) > 0 {
		rawPinHash := paramPinHash[0]
		rctx.PinHash = rawPinHash
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeletePinContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeletePinContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeletePinContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// ListPinContext provides the pin list action context.
type ListPinContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
}

// NewListPinContext parses the incoming request URL and body, performs validations and creates the
// context used by the pin controller list action.
func NewListPinContext(ctx context.Context, service *goa.Service) (*ListPinContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ListPinContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPinContext) OK(r PinbasePinCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.pin+json; type=collection")
	if r == nil {
		r = PinbasePinCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ShowPinContext provides the pin show action context.
type ShowPinContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
	PinHash   string
}

// NewShowPinContext parses the incoming request URL and body, performs validations and creates the
// context used by the pin controller show action.
func NewShowPinContext(ctx context.Context, service *goa.Service) (*ShowPinContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := ShowPinContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	paramPinHash := req.Params["pinHash"]
	if len(paramPinHash) > 0 {
		rawPinHash := paramPinHash[0]
		rctx.PinHash = rawPinHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowPinContext) OK(r *PinbasePin) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.pin+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowPinContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdatePinContext provides the pin update action context.
type UpdatePinContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PartyHash string
	PinHash   string
	Payload   *PinUpdatePayload
}

// NewUpdatePinContext parses the incoming request URL and body, performs validations and creates the
// context used by the pin controller update action.
func NewUpdatePinContext(ctx context.Context, service *goa.Service) (*UpdatePinContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	rctx := UpdatePinContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPartyHash := req.Params["partyHash"]
	if len(paramPartyHash) > 0 {
		rawPartyHash := paramPartyHash[0]
		rctx.PartyHash = rawPartyHash
	}
	paramPinHash := req.Params["pinHash"]
	if len(paramPinHash) > 0 {
		rawPinHash := paramPinHash[0]
		rctx.PinHash = rawPinHash
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdatePinContext) OK(r *PinbasePin) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.pinbase.pin+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdatePinContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdatePinContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
