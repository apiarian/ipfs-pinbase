// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": pin Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// CreatePinPayload is the pin create action payload.
type CreatePinPayload struct {
	// Aliases for the pinned object
	Aliases []string `form:"aliases" json:"aliases" xml:"aliases"`
	// The hash of the object to be pinned
	Hash string `form:"hash" json:"hash" xml:"hash"`
	// Indicates that the party wants to actually pin the object
	WantPinned bool `form:"want-pinned" json:"want-pinned" xml:"want-pinned"`
}

// CreatePinPath computes a request path to the create action of pin.
func CreatePinPath(partyHash string) string {
	param0 := partyHash

	return fmt.Sprintf("/api/parties/%s/pins", param0)
}

// Create a pin under the party
func (c *Client) CreatePin(ctx context.Context, path string, payload *CreatePinPayload) (*http.Response, error) {
	req, err := c.NewCreatePinRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreatePinRequest create the request corresponding to the create action endpoint of the pin resource.
func (c *Client) NewCreatePinRequest(ctx context.Context, path string, payload *CreatePinPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeletePinPath computes a request path to the delete action of pin.
func DeletePinPath(partyHash string, pinHash string) string {
	param0 := partyHash
	param1 := pinHash

	return fmt.Sprintf("/api/parties/%s/pins/%s", param0, param1)
}

// Delete a pin under the party
func (c *Client) DeletePin(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeletePinRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeletePinRequest create the request corresponding to the delete action endpoint of the pin resource.
func (c *Client) NewDeletePinRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPinPath computes a request path to the list action of pin.
func ListPinPath(partyHash string) string {
	param0 := partyHash

	return fmt.Sprintf("/api/parties/%s/pins", param0)
}

// List the pins under the party
func (c *Client) ListPin(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPinRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPinRequest create the request corresponding to the list action endpoint of the pin resource.
func (c *Client) NewListPinRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowPinPath computes a request path to the show action of pin.
func ShowPinPath(partyHash string, pinHash string) string {
	param0 := partyHash
	param1 := pinHash

	return fmt.Sprintf("/api/parties/%s/pins/%s", param0, param1)
}

// Get the pin under the party by hash
func (c *Client) ShowPin(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPinRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPinRequest create the request corresponding to the show action endpoint of the pin resource.
func (c *Client) NewShowPinRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdatePinPath computes a request path to the update action of pin.
func UpdatePinPath(partyHash string, pinHash string) string {
	param0 := partyHash
	param1 := pinHash

	return fmt.Sprintf("/api/parties/%s/pins/%s", param0, param1)
}

// Update a pin under the party
func (c *Client) UpdatePin(ctx context.Context, path string, payload *PinUpdatePayload) (*http.Response, error) {
	req, err := c.NewUpdatePinRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdatePinRequest create the request corresponding to the update action endpoint of the pin resource.
func (c *Client) NewUpdatePinRequest(ctx context.Context, path string, payload *PinUpdatePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	return req, nil
}
