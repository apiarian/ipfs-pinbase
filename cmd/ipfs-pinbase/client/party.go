// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": party Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// CreatePartyPayload is the party create action payload.
type CreatePartyPayload struct {
	// A helpful description of the party
	Description string `form:"description" json:"description" xml:"description"`
	// The hash of the object describing the party
	Hash string `form:"hash" json:"hash" xml:"hash"`
}

// CreatePartyPath computes a request path to the create action of party.
func CreatePartyPath() string {

	return fmt.Sprintf("/api/parties")
}

// Create a party
func (c *Client) CreateParty(ctx context.Context, path string, payload *CreatePartyPayload) (*http.Response, error) {
	req, err := c.NewCreatePartyRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreatePartyRequest create the request corresponding to the create action endpoint of the party resource.
func (c *Client) NewCreatePartyRequest(ctx context.Context, path string, payload *CreatePartyPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// DeletePartyPath computes a request path to the delete action of party.
func DeletePartyPath(partyHash string) string {
	param0 := partyHash

	return fmt.Sprintf("/api/parties/%s", param0)
}

// Delete a party
func (c *Client) DeleteParty(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeletePartyRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeletePartyRequest create the request corresponding to the delete action endpoint of the party resource.
func (c *Client) NewDeletePartyRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListPartyPath computes a request path to the list action of party.
func ListPartyPath() string {

	return fmt.Sprintf("/api/parties")
}

// List the parties available in this pinbase
func (c *Client) ListParty(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPartyRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPartyRequest create the request corresponding to the list action endpoint of the party resource.
func (c *Client) NewListPartyRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowPartyPath computes a request path to the show action of party.
func ShowPartyPath(partyHash string) string {
	param0 := partyHash

	return fmt.Sprintf("/api/parties/%s", param0)
}

// Get the party by hash
func (c *Client) ShowParty(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowPartyRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowPartyRequest create the request corresponding to the show action endpoint of the party resource.
func (c *Client) NewShowPartyRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdatePartyPath computes a request path to the update action of party.
func UpdatePartyPath(partyHash string) string {
	param0 := partyHash

	return fmt.Sprintf("/api/parties/%s", param0)
}

// Change a party's description
func (c *Client) UpdateParty(ctx context.Context, path string, payload *PartyUpdatePayload) (*http.Response, error) {
	req, err := c.NewUpdatePartyRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdatePartyRequest create the request corresponding to the update action endpoint of the party resource.
func (c *Client) NewUpdatePartyRequest(ctx context.Context, path string, payload *PartyUpdatePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	return req, nil
}
