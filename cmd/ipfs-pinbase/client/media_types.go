// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": Application Media Types
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A Pinbase Party (default view)
//
// Identifier: application/vnd.pinbase.party+json; view=default
type PinbaseParty struct {
	// A helpful description of the party
	Description string `form:"description" json:"description" xml:"description"`
	// The hash of the object describing the party
	Hash string `form:"hash" json:"hash" xml:"hash"`
}

// Validate validates the PinbaseParty media type instance.
func (mt *PinbaseParty) Validate() (err error) {
	if mt.Hash == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "hash"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	return
}

// DecodePinbaseParty decodes the PinbaseParty instance encoded in resp body.
func (c *Client) DecodePinbaseParty(resp *http.Response) (*PinbaseParty, error) {
	var decoded PinbaseParty
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// PinbasePartyCollection is the media type for an array of PinbaseParty (default view)
//
// Identifier: application/vnd.pinbase.party+json; type=collection; view=default
type PinbasePartyCollection []*PinbaseParty

// Validate validates the PinbasePartyCollection media type instance.
func (mt PinbasePartyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodePinbasePartyCollection decodes the PinbasePartyCollection instance encoded in resp body.
func (c *Client) DecodePinbasePartyCollection(resp *http.Response) (PinbasePartyCollection, error) {
	var decoded PinbasePartyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}
