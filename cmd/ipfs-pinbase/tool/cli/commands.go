// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/design
// --out=$(GOPATH)/src/github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase
// --version=v1.1.0-dirty
//
// API "pinbase": CLI Commands
//
// The content of this file is auto-generated, DO NOT MODIFY

package cli

import (
	"encoding/json"
	"fmt"
	"github.com/apiarian/ipfs-pinbase/cmd/ipfs-pinbase/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"golang.org/x/net/context"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CreatePartyCommand is the command line data structure for the create action of party
	CreatePartyCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeletePartyCommand is the command line data structure for the delete action of party
	DeletePartyCommand struct {
		// Party Hash
		PartyHash   string
		PrettyPrint bool
	}

	// ListPartyCommand is the command line data structure for the list action of party
	ListPartyCommand struct {
		PrettyPrint bool
	}

	// ShowPartyCommand is the command line data structure for the show action of party
	ShowPartyCommand struct {
		// Party Hash
		PartyHash   string
		PrettyPrint bool
	}

	// UpdatePartyCommand is the command line data structure for the update action of party
	UpdatePartyCommand struct {
		Payload     string
		ContentType string
		// Party Hash
		PartyHash   string
		PrettyPrint bool
	}

	// CreatePinCommand is the command line data structure for the create action of pin
	CreatePinCommand struct {
		Payload     string
		ContentType string
		// Party Hash
		PartyHash   string
		PrettyPrint bool
	}

	// DeletePinCommand is the command line data structure for the delete action of pin
	DeletePinCommand struct {
		// Party Hash
		PartyHash string
		// Pin Hash
		PinHash     string
		PrettyPrint bool
	}

	// ListPinCommand is the command line data structure for the list action of pin
	ListPinCommand struct {
		// Party Hash
		PartyHash   string
		PrettyPrint bool
	}

	// ShowPinCommand is the command line data structure for the show action of pin
	ShowPinCommand struct {
		// Party Hash
		PartyHash string
		// Pin Hash
		PinHash     string
		PrettyPrint bool
	}

	// UpdatePinCommand is the command line data structure for the update action of pin
	UpdatePinCommand struct {
		Payload     string
		ContentType string
		// Party Hash
		PartyHash string
		// Pin Hash
		PinHash     string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp1 := new(CreatePartyCommand)
	sub = &cobra.Command{
		Use:   `party ["/api/parties"]`,
		Short: `The Pinbase Party resource`,
		Long: `The Pinbase Party resource

Payload example:

{
   "description": "Commodi ea magni mollitia dicta.",
   "hash": "Magni ullam id dolorem sunt consequatur incidunt."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(CreatePinCommand)
	sub = &cobra.Command{
		Use:   `pin ["/api/parties/PARTYHASH/pins"]`,
		Short: `A thing to pin in IPFS`,
		Long: `A thing to pin in IPFS

Payload example:

{
   "aliases": [
      "Ipsa architecto.",
      "Ipsa architecto."
   ],
   "hash": "Ut velit.",
   "want-pinned": true
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete",
		Short: `delete action`,
	}
	tmp3 := new(DeletePartyCommand)
	sub = &cobra.Command{
		Use:   `party ["/api/parties/PARTYHASH"]`,
		Short: `The Pinbase Party resource`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(DeletePinCommand)
	sub = &cobra.Command{
		Use:   `pin ["/api/parties/PARTYHASH/pins/PINHASH"]`,
		Short: `A thing to pin in IPFS`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp5 := new(ListPartyCommand)
	sub = &cobra.Command{
		Use:   `party ["/api/parties"]`,
		Short: `The Pinbase Party resource`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(ListPinCommand)
	sub = &cobra.Command{
		Use:   `pin ["/api/parties/PARTYHASH/pins"]`,
		Short: `A thing to pin in IPFS`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp7 := new(ShowPartyCommand)
	sub = &cobra.Command{
		Use:   `party ["/api/parties/PARTYHASH"]`,
		Short: `The Pinbase Party resource`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(ShowPinCommand)
	sub = &cobra.Command{
		Use:   `pin ["/api/parties/PARTYHASH/pins/PINHASH"]`,
		Short: `A thing to pin in IPFS`,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `update action`,
	}
	tmp9 := new(UpdatePartyCommand)
	sub = &cobra.Command{
		Use:   `party ["/api/parties/PARTYHASH"]`,
		Short: `The Pinbase Party resource`,
		Long: `The Pinbase Party resource

Payload example:

{
   "description": "Doloremque modi et quae."
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp10 := new(UpdatePinCommand)
	sub = &cobra.Command{
		Use:   `pin ["/api/parties/PARTYHASH/pins/PINHASH"]`,
		Short: `A thing to pin in IPFS`,
		Long: `A thing to pin in IPFS

Payload example:

{
   "aliases": [
      "Provident est eum quis rem ut."
   ],
   "want-pinned": false
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CreatePartyCommand command.
func (cmd *CreatePartyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/parties"
	}
	var payload client.CreatePartyPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateParty(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreatePartyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeletePartyCommand command.
func (cmd *DeletePartyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v", url.QueryEscape(cmd.PartyHash))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteParty(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeletePartyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
}

// Run makes the HTTP request corresponding to the ListPartyCommand command.
func (cmd *ListPartyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/parties"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListParty(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListPartyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the ShowPartyCommand command.
func (cmd *ShowPartyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v", url.QueryEscape(cmd.PartyHash))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowParty(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowPartyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
}

// Run makes the HTTP request corresponding to the UpdatePartyCommand command.
func (cmd *UpdatePartyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v", url.QueryEscape(cmd.PartyHash))
	}
	var payload client.PartyUpdatePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateParty(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdatePartyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
}

// Run makes the HTTP request corresponding to the CreatePinCommand command.
func (cmd *CreatePinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v/pins", url.QueryEscape(cmd.PartyHash))
	}
	var payload client.CreatePinPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreatePin(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreatePinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
}

// Run makes the HTTP request corresponding to the DeletePinCommand command.
func (cmd *DeletePinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v/pins/%v", url.QueryEscape(cmd.PartyHash), url.QueryEscape(cmd.PinHash))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeletePin(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeletePinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
	var pinHash string
	cc.Flags().StringVar(&cmd.PinHash, "pinHash", pinHash, `Pin Hash`)
}

// Run makes the HTTP request corresponding to the ListPinCommand command.
func (cmd *ListPinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v/pins", url.QueryEscape(cmd.PartyHash))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListPin(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListPinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
}

// Run makes the HTTP request corresponding to the ShowPinCommand command.
func (cmd *ShowPinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v/pins/%v", url.QueryEscape(cmd.PartyHash), url.QueryEscape(cmd.PinHash))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowPin(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowPinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
	var pinHash string
	cc.Flags().StringVar(&cmd.PinHash, "pinHash", pinHash, `Pin Hash`)
}

// Run makes the HTTP request corresponding to the UpdatePinCommand command.
func (cmd *UpdatePinCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/parties/%v/pins/%v", url.QueryEscape(cmd.PartyHash), url.QueryEscape(cmd.PinHash))
	}
	var payload client.PinUpdatePayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdatePin(ctx, path, &payload)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdatePinCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var partyHash string
	cc.Flags().StringVar(&cmd.PartyHash, "partyHash", partyHash, `Party Hash`)
	var pinHash string
	cc.Flags().StringVar(&cmd.PinHash, "pinHash", pinHash, `Pin Hash`)
}
